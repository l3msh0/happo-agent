box: "netmarkjp/golang-build:1.9.2"
build: 
  steps:
    - wercker/setup-go-workspace:
        package-dir: github.com/heartbeatsjp/happo-agent
    - script: 
        name: "dep ensure"
        code: "dep ensure && dep status"
    - script: 
        name: "goimports"
        code: |
            GOFILES=$(find . -type f -name "*.go" | grep -vE '\./(.git|.wercker|vendor)' | xargs echo)
            goimports -d -e ${GOFILES}
            if [[ $(goimports -d -e ${GOFILES}) == "" ]]; then echo pass; else echo failed; exit 1; fi
    - script: 
        name: "golint"
        code: |
            GODIRECTORIES=". $(find . -type f -name '*.go' | grep -vE '\./(.git|.wercker|vendor)' | grep './.*/.*' | sed 's@[^/]*.go@...@' | sort | uniq | xargs echo)"
            for d in "${GODIRECTORIES}" ; do golint -set_exit_status $d; done
    - script: 
        name: "go vet"
        code: |
            GODIRECTORIES=". $(find . -type f -name '*.go' | grep -vE '\./(.git|.wercker|vendor)' | grep './.*/.*' | sed 's@[^/]*.go@...@' | sort | uniq | xargs echo)"
            go vet ${GODIRECTORIES:?}
    - script: 
        name: "install test plugin"
        code: |
            install -m 755 collect/metrics_test_plugin /usr/local/bin/metrics_test_plugin
            install -m 755 model/monitor_test_plugin /usr/local/bin/monitor_test_plugin
            install -m 755 model/monitor_test_sleep /usr/local/bin/monitor_test_sleep
    - script: 
        name: "go test"
        code: |
            GODIRECTORIES=". $(find . -type f -name '*.go' | grep -vE '\./(.git|.wercker|vendor)' | grep './.*/.*' | sed 's@[^/]*.go@...@' | sort | uniq | xargs echo)"
            # go test ${GODIRECTORIES:?}
            goverage -v -coverprofile coverage.out ${GODIRECTORIES:?}
            go tool cover -html=coverage.out -o ${WERCKER_OUTPUT_DIR:?}/coverage.html
    - tcnksm/gox:
        os: "linux"
        arch: "amd64"
        ldflags: "-X main.Version=$(git describe --tags)"
    - script:
        name: "archive"
        code: |
            DIST_DIR="${WERCKER_OUTPUT_DIR:?}/dist"
            mkdir ${DIST_DIR:?} || true
            cd ${WERCKER_OUTPUT_DIR:?}/pkg
            find . -mindepth 1 -maxdepth 1 -type d | while read line; do tar zcfp ${DIST_DIR:?}/$line.tar.gz ${line:?} ; done
            cd ${DIST_DIR:?}
            md5sum * > MD5SUM
deploy:
    steps: 
        - tcnksm/ghr: 
            input: dist
            replace: true
            token: $GITHUB_TOKEN
